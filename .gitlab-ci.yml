# -*- indent-tabs-mode: nil; c-basic-offset: 4; tab-width: 4;-*-
image: debian:testing

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  CXXFLAGS: "-O3"
  OMPI_ALLOW_RUN_AS_ROOT: 1
  OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1

openmpi:
    stage: build
    script:
        - apt update  -qq
        - apt install -qq -y --no-install-recommends libopenmpi-dev openmpi-bin cmake make g++ libboost-serialization-dev
        - cd ..
        - ln -s boost-mpi3 mpi3
        - cd mpi3/test
        - mkdir build
        - cd build
        - export MPI_OVERSUBSCRIBE="--oversubscribe"
        - cmake ..
        - pwd
        - mpirun --version
        - make
        - ctest --output-on-failure
        
#openmpi-valgrind:
#    stage: build
#    script:
#        - apt update  -qq
#        - apt install -qq -y --no-install-recommends libopenmpi-dev openmpi-bin cmake make g++ libboost-serialization-dev valgrind
#        - cd ..
#        - ln -s boost-mpi3 mpi3
#        - cd mpi3/test
#        - mkdir build
#        - cd build
#        - export MPI_OVERSUBSCRIBE=--oversubscribe
#        - export VALGRIND_EXE="valgrind --suppressions=communicator_main.cpp.openmpi.supp"
#        - cmake ..
#        - pwd
#        - mpirun --version
#        - make -j 4
#        - ctest -VV --output-on-failure

mpich:
    stage: build
    script:
        - apt update  -qq
        - apt install -qq -y --no-install-recommends libmpich-dev mpich cmake make g++ libboost-serialization-dev
        - mpirun --version
        - cd ..
        - ln -s boost-mpi3 mpi3
        - cd mpi3/test
        - mkdir build
        - cd build
        - export MPI_OVERSUBSCRIBE=""
        - cmake ..
        - make
        - ctest --output-on-failure

mpich-valgrind:
    stage: build
    script:
        - apt update  -qq
        - apt install -qq -y --no-install-recommends libmpich-dev mpich cmake make g++ libboost-serialization-dev valgrind
        - mpirun --version
        - cd ..
        - ln -s boost-mpi3 mpi3
        - cd mpi3/test
        - mkdir build
        - cd build
        - export MPI_OVERSUBSCRIBE=""
        - export VALGRIND_EXE="valgrind --leak-check=full --track-origins=yes --show-leak-kinds=all --error-exitcode=1"
        - cmake ..
        - make
        - ctest --output-on-failure

qmcpack-g++:
    stage: test
    script:
        - apt-get -qq update && apt-get -qq install --no-install-recommends -y libblas-dev liblapack-dev libfftw3-dev libboost-serialization-dev libopenmpi-dev gfortran g++ cmake make git ca-certificates   numdiff  python3 python3-numpy python3-h5py python3-mpi4py python3-scipy libxml2-dev libhdf5-dev
        - git clone https://github.com/QMCPACK/qmcpack.git
        - cd qmcpack
        - git config --global user.email "alfredo.correa@gmail.com" && git config --global user.name "Alfredo Correa"
        - git rm -r external_codes/mpi_wrapper/mpi3 && git commit -m "remove mpi3 subtree"
        - git subtree add --squash -P external_codes/mpi_wrapper/mpi3 https://gitlab.com/correaa/boost-mpi3.git $CI_COMMIT_BRANCH
        - cd build
        - cmake -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DBUILD_AFQMC=1 -DBUILD_PPCONVERT=1 -DQMC_MIXED_PRECISION=1 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-Werror" -DMPIEXEC_PREFLAGS="--allow-run-as-root;--bind-to;none" ..
        - make ppconvert afqmc test_afqmc_matrix test_afqmc_numerics test_afqmc_slaterdeterminantoperations test_afqmc_walkers test_afqmc_hamiltonians test_afqmc_hamiltonian_operations test_afqmc_phmsd test_afqmc_wfn_factory test_afqmc_prop_factory test_afqmc_estimators qmc-afqmc-performance
        - ctest --output-on-failure

qmcpack-cuda-11.2-compileonly:
    image: nvidia/cuda:11.2.0-devel
    stage: test
    script:
        - export DEBIAN_FRONTEND=noninteractive
        - apt-get -qq update && apt-get -qq install --no-install-recommends -y libblas-dev liblapack-dev libfftw3-dev libboost-serialization-dev libopenmpi-dev gfortran g++ cmake make git ca-certificates    numdiff  python3 python3-numpy python3-h5py python3-mpi4py python3-scipy libxml2-dev libhdf5-dev
        - git clone https://github.com/QMCPACK/qmcpack.git
        - cd qmcpack
        - git config --global user.email "alfredo.correa@gmail.com" && git config --global user.name "Alfredo Correa"
        - git rm -r external_codes/mpi_wrapper/mpi3 && git commit -m "remove mpi3 subtree"
        - git subtree add --squash -P external_codes/mpi_wrapper/mpi3 https://gitlab.com/correaa/boost-mpi3.git $CI_COMMIT_BRANCH
        - cd build
        - cmake -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpicxx -DBUILD_AFQMC=1 -DBUILD_PPCONVERT=1 -DQMC_CXX_STANDARD=17 -DENABLE_CUDA=1 ..
        - make #ppconvert afqmc test_afqmc_matrix test_afqmc_numerics test_afqmc_slaterdeterminantoperations test_afqmc_walkers test_afqmc_hamiltonians test_afqmc_hamiltonian_operations test_afqmc_phmsd test_afqmc_wfn_factory test_afqmc_prop_factory test_afqmc_estimators qmc-afqmc-performance

inq-g++-latest:
    stage: test
    script:
        - apt-get update && apt-get install --no-install-recommends -y --quiet libblas-dev liblapack-dev libfftw3-dev libboost-serialization-dev libopenmpi-dev gfortran g++ cmake make git ca-certificates
        - git clone --recurse-submodules --remote-submodules https://gitlab.com/npneq/inq.git
        - cd inq
        - cd external_libs/mpi3
        - git checkout $CI_COMMIT_BRANCH
        - cd ../..
        - mkdir build && cd build
        - CXX=mpic++ ../configure --prefix=$HOME
        - make
        - make install
        - ctest --output-on-failure

inq-cuda-11.2-compileonly:
    image: nvidia/cuda:11.2.0-devel
    stage: test
    script:
      - export DEBIAN_FRONTEND=noninteractive
      - apt-get update && apt-get install --no-install-recommends -y --quiet libblas-dev liblapack-dev libfftw3-dev libboost-serialization-dev libopenmpi-dev gfortran g++ cmake make git ca-certificates
      - git clone --recurse-submodules https://gitlab.com/npneq/inq.git
      - cd inq
      - cd external_libs/mpi3
      - git checkout $CI_COMMIT_BRANCH
      - cd ../..
      - mkdir build && cd build
      - export CUDACXX=/usr/local/cuda/bin/nvcc
      - export CUDAFLAGS="$(for x in `mpic++ --showme:incdirs`; do echo -n -I$x" " ; done) -std=c++17 -DFMT_USE_UDL_TEMPLATE=0 -D_DISABLE_CUDA_SLOW -O0 --gpu-architecture sm_70 --expt-relaxed-constexpr --expt-extended-lambda --Werror=cross-execution-space-call --compiler-options -std=c++17,-O0,-Wall,-Wfatal-errors"
      - export LDFLAGS=$(for x in `mpic++ --showme:libdirs`; do echo -n -L$x" " ; done)
      - export LIBS=$(for x in `mpic++ --showme:libs`; do echo -n -l$x" " ; done)
      - $CUDACXX -V
      - ../configure --prefix=$PREFIX --enable-cuda --with-cuda-prefix=/usr/local/cuda
      - make silicon

inq-nvcc-ompi:
    stage: test
    tags:
        - intel_compiler
    script:
        - export PREFIX=`mktemp -d`
        - git clone --recurse-submodules https://gitlab.com/npneq/inq.git
        - cd inq
        - cd external_libs/mpi3
        - git checkout $CI_COMMIT_BRANCH
        - cd ../..
        - mkdir build && cd build
        - export CUDACXX=/usr/local/cuda/bin/nvcc
        - export CUDAFLAGS="$(for x in `mpic++ --showme:incdirs`; do echo -n -I$x" " ; done) -std=c++17 -DFMT_USE_UDL_TEMPLATE=0 -D_DISABLE_CUDA_SLOW -O3 --gpu-architecture sm_70 --expt-relaxed-constexpr --expt-extended-lambda --Werror=cross-execution-space-call --compiler-options -Ofast,-std=c++17,-Wall,-Wfatal-errors"
        - export LDFLAGS=$(for x in `mpic++ --showme:libdirs`; do echo -n -L$x" " ; done)
        - export LIBS=$(for x in `mpic++ --showme:libs`; do echo -n -l$x" " ; done)
        - $CUDACXX -V
        - ../configure --prefix=$PREFIX --enable-cuda --with-cuda-prefix=/usr/local/cuda
        - make -j8
        - make -j8 install
        - ctest --output-on-failure --timeout 600
        - cd src; INQ_EXEC_ENV="mpirun --oversubscribe -np 4" ctest --output-on-failure --timeout 600; cd ..
        - rm -rf $PREFIX

